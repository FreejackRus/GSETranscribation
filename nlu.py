import logging
import json
import regex as re
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def load_llm_model(model_name: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä.
    """
    logger.info(f"üß† –ó–∞–≥—Ä—É–∂–∞–µ–º LLM: {model_name}")
    try:
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
        ).to("cuda" if torch.cuda.is_available() else "cpu")
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model.device}")
        return tokenizer, model
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        raise

def extract_first_json(text: str) -> dict | None:
    """
    –ò—â–µ—Ç –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è JSON –∏–ª–∏ JSON-like –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ dict.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é.
    """
    logger.debug("üîç –ü–æ–∏—Å–∫ JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏...")

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON-–æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–∞—Å—Å–∏–≤–æ–≤
    pattern = r'\{(?:[^{}]|(?R))*\}|\$$(?:[^\$$]|(?R))*\$$'

    try:
        matches = re.findall(pattern, text, flags=re.DOTALL)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

    for i, match in enumerate(matches):
        logger.debug(f"üîé –ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π JSON (–≤–∞—Ä–∏–∞–Ω—Ç {i + 1}): {match[:200]}...")

        try:
            result = json.loads(match)
            logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            return result
        except json.JSONDecodeError as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (–≤–∞—Ä–∏–∞–Ω—Ç {i + 1}): {e}")

    logger.error("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return None


def parse_voice_claim(text: str, tokenizer, model) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    –ï—Å–ª–∏ LLM –Ω–µ –≤–µ—Ä–Ω—É–ª JSON ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback-–ø–∞—Ä—Å–µ—Ä –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–∫–∞—Ö.
    """

    prompt = f"""
    –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–æ–º–ø—Ç. –ù–µ –¥–æ–±–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç. –†–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º: "{text}".

    –í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ **–≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç** —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
    - train_number (—Å—Ç—Ä–æ–∫–∞ (–Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞))
    - wagon_number (—Å—Ç—Ä–æ–∫–∞ (–Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞))
    - wagon_sn (—Å—Ç—Ä–æ–∫–∞ (—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞))
    - problems (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (–ø—Ä–æ–±–ª–µ–º—ã))
    - executor_name (–§–ò–û)
    """

    logger.info("üìù –ü—Ä–æ–º–ø—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤ –º–æ–¥–µ–ª—å:")
    logger.info(prompt)

    logger.info("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM...")
    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)
    outputs = model.generate(**inputs, max_new_tokens=300)

    response = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
    logger.info("üü¢ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω:")
    logger.info(response)

    logger.info("üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏...")
    result = extract_first_json(response)

    if result:
        logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")
        logger.debug(f"üìä –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result}")

        return {
            "train_number": result.get("train_number"),
            "wagon_number": result.get("wagon_number"),
            "wagon_sn": result.get("wagon_sn"),
            "problems": result.get("problems", []),
            "executor_name": result.get("executor_name")
        }
    else:
        logger.warning("‚ö†Ô∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏, –ø–µ—Ä–µ—Ö–æ–∂—É –∫ fallback-–ø–∞—Ä—Å–µ—Ä—É")
        fallback_data = extract_data_from_text_fallback(text)
        logger.info("üîÑ Fallback-–¥–∞–Ω–Ω—ã–µ:")
        logger.debug(fallback_data)
        return fallback_data


def extract_data_from_text_fallback(text: str) -> dict:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
    """
    data = {}

    # –ü–æ–µ–∑–¥
    train_match = re.search(r"(?:–ø–æ–µ–∑–¥|–Ω–æ–º–µ—Ä\s+–ø–æ–µ–∑–¥–∞).*?(\d+)", text, re.IGNORECASE)
    data["train_number"] = train_match.group(1) if train_match else None

    # –í–∞–≥–æ–Ω
    wagon_match = re.search(r"(?:–≤–∞–≥–æ–Ω|–Ω–æ–º–µ—Ä\s+–≤–∞–≥–æ–Ω–∞).*?(\d{1,2})", text, re.IGNORECASE)
    if wagon_match:
        wagon_num = wagon_match.group(1)
        if 1 <= int(wagon_num) <= 26:
            data["wagon_number"] = wagon_match.group(1)

    # –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ (–Ω–µ —É–∫–∞–∑–∞–Ω ‚Üí None)
    data["wagon_sn"] = None

    # –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è
    name_match = re.search(r"([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)", text)
    if not name_match:
        name_match = re.search(r"([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)", text)
    data["executor_name"] = name_match.group(1) if name_match else None

    # –ü—Ä–æ–±–ª–µ–º—ã
    problem_keywords = ["–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Å–ª–æ–º–∞–Ω", "–Ω–µ—Ç", "–Ω–µ –∏–¥–µ—Ç"]
    problem_parts = []

    for keyword in problem_keywords:
        parts = re.split(keyword, text, flags=re.IGNORECASE)
        if len(parts) > 1:
            problem_parts.append(parts[-1].strip())

    if problem_parts:
        problems = [p.strip() for p in " ".join(problem_parts).split(".") if p.strip()]
        data["problems"] = problems
    else:
        data["problems"] = [text[:100]]

    return data